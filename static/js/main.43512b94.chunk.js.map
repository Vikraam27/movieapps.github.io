{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","className","key","alt","src","poster_src","title","release_date","vote_average","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","console","log","urlString","$","ajax","success","searchResult","result","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","width","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wOA0BeA,G,gLApBX,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,I,+BAGnB,OAAO,2BAAOQ,UAAU,OAAOC,IAAKR,KAAKC,MAAMC,MAAMC,IACrD,+BACE,4BACE,4BAAI,yBAAKM,IAAI,SAASF,UAAU,WAAWG,IAAKV,KAAKC,MAAMC,MAAMS,cACjE,wBAAIJ,UAAW,QAAO,4BAAKP,KAAKC,MAAMC,MAAMU,OAC5C,2CAAiBZ,KAAKC,MAAMC,MAAMW,cAClC,6CAAmBb,KAAKC,MAAMC,MAAMY,cACpC,wCAAcd,KAAKC,MAAMC,MAAMa,UAE/B,2BAAOR,UAAU,OAAOS,KAAO,SAASC,QAASjB,KAAKkB,UAAUC,KAAKnB,MAAOoB,MAAQ,iB,GAjBzEC,IAAMC,Y,gBCiEdC,E,kDA5Db,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IACDuB,MAAO,GAEZ,EAAKC,cAAc,UAJH,E,0DAMJC,GAAY,IAAD,OACvBC,QAAQC,IAAI,UACZ,IAAMC,EAAW,2GAA6GH,EAE9HI,IAAEC,KAAK,CACLhC,IAAK8B,EACLG,QAAS,SAACC,GACRN,QAAQC,IAAI,UAEZ,IAAMM,EAASD,EAAaE,QAExBC,EAAY,GAEhBF,EAAOG,SAAQ,SAACnC,GACdA,EAAMS,WAAa,mCAAqCT,EAAMoC,YAE9D,IAAMC,EAAW,kBAAC,EAAD,CAAU/B,IAAKN,EAAMC,GAAID,MAAOA,IACjDkC,EAAUI,KAAKD,MAEjB,EAAKE,SAAS,CAACC,KAAMN,KAEvBO,MAAO,SAACC,EAAKC,EAAQC,GACnBnB,QAAQgB,MAAM,qB,0CAIAI,GAClBpB,QAAQC,IAAImB,EAAMC,OAAO5B,OACzB,IACMM,EAAaqB,EAAMC,OAAO5B,MADZpB,KAERyB,cAAcC,K,+BAK1B,OACE,yBAAKnB,UAAU,OACb,2BAAOA,UAAU,YACf,+BACE,4BACE,4BAAI,yBAAKE,IAAI,WAAWwC,MAAM,KAAKvC,IAAI,cACvC,wBAAIuC,MAAO,MACX,4BAAI,+CAIV,2BAAOC,SAAUlD,KAAKmD,oBAAoBhC,KAAKnB,MAAOO,UAAU,cAAc6C,YAAY,sBACzFpD,KAAKwB,MAAMkB,U,GAtDFpB,aCME+B,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLhB,QAAQgB,MAAMA,EAAMyB,a","file":"static/js/main.43512b94.chunk.js","sourcesContent":["import React from 'react'\n\nclass MovieRow extends React.Component{\n  viewMovie(){\n    // console.log('bom')\n    // console.log(this.props.movie.title)\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n    render(){\n        return <table className=\"card\" key={this.props.movie.id}>\n        <tbody>\n          <tr>\n            <td><img alt=\"poster\" className=\"img_view\" src={this.props.movie.poster_src}/></td>\n            <td className= \"fosn\"><h3>{this.props.movie.title}</h3>\n            <p>Relase date: {this.props.movie.release_date}</p>\n            <p>IMDB ratings : {this.props.movie.vote_average}</p>\n            <p>Sinopsis: {this.props.movie.overview}</p>\n\n            <input className=\"view\" type = \"button\" onClick={this.viewMovie.bind(this)} value = \"view\"/>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    }\n}\nexport default MovieRow","\nimport React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state ={}\n\n    this.performSearch(\"batman\")\n  }\n  performSearch(searchTerm){\n    console.log('vikram')\n    const urlString =\"https://api.themoviedb.org/3/search/movie?api_key=5f793d033ea33558e13b3664b3eadca9&language=en-US&query=\" + searchTerm\n\n    $.ajax({\n      url: urlString,\n      success :(searchResult) =>{\n        console.log(\"succes\")\n        // console.log(searchResult)\n        const result = searchResult.results \n        // console.log(result[0])\n        var movieRows = []\n\n        result.forEach((movie) =>{\n          movie.poster_src = \"https://image.tmdb.org/t/p/w500/\" + movie.poster_path\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"failed fetch\")\n      }\n    })\n  }\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n}\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td><img alt=\"app icon\" width=\"50\" src=\"logo.jpg\"/></td>\n              <td width =\"8\"/>\n              <td><h2>Movies Apps</h2></td>\n            </tr>\n          </tbody>\n        </table>\n        <input onChange={this.searchChangeHandler.bind(this)} className=\"searchMovie\" placeholder=\"Enter the keyword\"/>\n        {this.state.rows}\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}